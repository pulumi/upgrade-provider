// Code generated by calls.go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package step

// This file contains Call${I}${O} and Call${I}${O}E implementations for I=0..8, O=0..8.
//
// This represents a function call with I inputs and O returned values. If there is an E at
// the end of the Call: Call00E, then there is an additional expected error in the passed
// through function.

import "context"

func Func00(name string, f func(context.Context)) func(context.Context) {
	return Func00E(name, func(ctx context.Context) error {
		f(ctx)
		return nil
	})
}

func Func00E(name string, f func(context.Context) error) func(context.Context) {
	return func(ctx context.Context) {
		inputs := []any{}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func01[O1 any](name string, f func(context.Context) O1) func(context.Context) O1 {
	return Func01E(name, func(ctx context.Context) (O1, error) {
		o1 := f(ctx)
		return o1, nil
	})
}

func Func01E[O1 any](name string, f func(context.Context) (O1, error)) func(context.Context) O1 {
	return func(ctx context.Context) O1 {
		inputs := []any{}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func02[O1 any, O2 any](name string, f func(context.Context) (O1, O2)) func(context.Context) (O1, O2) {
	return Func02E(name, func(ctx context.Context) (O1, O2, error) {
		o1, o2 := f(ctx)
		return o1, o2, nil
	})
}

func Func02E[O1 any, O2 any](name string, f func(context.Context) (O1, O2, error)) func(context.Context) (O1, O2) {
	return func(ctx context.Context) (O1, O2) {
		inputs := []any{}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func03[O1 any, O2 any, O3 any](name string, f func(context.Context) (O1, O2, O3)) func(context.Context) (O1, O2, O3) {
	return Func03E(name, func(ctx context.Context) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx)
		return o1, o2, o3, nil
	})
}

func Func03E[O1 any, O2 any, O3 any](name string, f func(context.Context) (O1, O2, O3, error)) func(context.Context) (O1, O2, O3) {
	return func(ctx context.Context) (O1, O2, O3) {
		inputs := []any{}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func04[O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context) (O1, O2, O3, O4)) func(context.Context) (O1, O2, O3, O4) {
	return Func04E(name, func(ctx context.Context) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx)
		return o1, o2, o3, o4, nil
	})
}

func Func04E[O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context) (O1, O2, O3, O4, error)) func(context.Context) (O1, O2, O3, O4) {
	return func(ctx context.Context) (O1, O2, O3, O4) {
		inputs := []any{}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func05[O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context) (O1, O2, O3, O4, O5)) func(context.Context) (O1, O2, O3, O4, O5) {
	return Func05E(name, func(ctx context.Context) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func05E[O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context) (O1, O2, O3, O4, O5, error)) func(context.Context) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context) (O1, O2, O3, O4, O5) {
		inputs := []any{}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func06[O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context) (O1, O2, O3, O4, O5, O6)) func(context.Context) (O1, O2, O3, O4, O5, O6) {
	return Func06E(name, func(ctx context.Context) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func06E[O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context) (O1, O2, O3, O4, O5, O6, error)) func(context.Context) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func07[O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context) (O1, O2, O3, O4, O5, O6, O7) {
	return Func07E(name, func(ctx context.Context) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func07E[O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

func Func10[I1 any](name string, f func(context.Context, I1)) func(context.Context, I1) {
	return Func10E(name, func(ctx context.Context, i1 I1) error {
		f(ctx, i1)
		return nil
	})
}

func Func10E[I1 any](name string, f func(context.Context, I1) error) func(context.Context, I1) {
	return func(ctx context.Context, i1 I1) {
		inputs := []any{i1}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func11[I1 any, O1 any](name string, f func(context.Context, I1) O1) func(context.Context, I1) O1 {
	return Func11E(name, func(ctx context.Context, i1 I1) (O1, error) {
		o1 := f(ctx, i1)
		return o1, nil
	})
}

func Func11E[I1 any, O1 any](name string, f func(context.Context, I1) (O1, error)) func(context.Context, I1) O1 {
	return func(ctx context.Context, i1 I1) O1 {
		inputs := []any{i1}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func12[I1 any, O1 any, O2 any](name string, f func(context.Context, I1) (O1, O2)) func(context.Context, I1) (O1, O2) {
	return Func12E(name, func(ctx context.Context, i1 I1) (O1, O2, error) {
		o1, o2 := f(ctx, i1)
		return o1, o2, nil
	})
}

func Func12E[I1 any, O1 any, O2 any](name string, f func(context.Context, I1) (O1, O2, error)) func(context.Context, I1) (O1, O2) {
	return func(ctx context.Context, i1 I1) (O1, O2) {
		inputs := []any{i1}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func13[I1 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1) (O1, O2, O3)) func(context.Context, I1) (O1, O2, O3) {
	return Func13E(name, func(ctx context.Context, i1 I1) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1)
		return o1, o2, o3, nil
	})
}

func Func13E[I1 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1) (O1, O2, O3, error)) func(context.Context, I1) (O1, O2, O3) {
	return func(ctx context.Context, i1 I1) (O1, O2, O3) {
		inputs := []any{i1}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func14[I1 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1) (O1, O2, O3, O4)) func(context.Context, I1) (O1, O2, O3, O4) {
	return Func14E(name, func(ctx context.Context, i1 I1) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1)
		return o1, o2, o3, o4, nil
	})
}

func Func14E[I1 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1) (O1, O2, O3, O4, error)) func(context.Context, I1) (O1, O2, O3, O4) {
	return func(ctx context.Context, i1 I1) (O1, O2, O3, O4) {
		inputs := []any{i1}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func15[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1) (O1, O2, O3, O4, O5)) func(context.Context, I1) (O1, O2, O3, O4, O5) {
	return Func15E(name, func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func15E[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1) (O1, O2, O3, O4, O5, error)) func(context.Context, I1) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5) {
		inputs := []any{i1}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func16[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1) (O1, O2, O3, O4, O5, O6)) func(context.Context, I1) (O1, O2, O3, O4, O5, O6) {
	return Func16E(name, func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func16E[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1) (O1, O2, O3, O4, O5, O6, error)) func(context.Context, I1) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{i1}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func17[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context, I1) (O1, O2, O3, O4, O5, O6, O7) {
	return Func17E(name, func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx, i1)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func17E[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context, I1) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{i1}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

func Func20[I1 any, I2 any](name string, f func(context.Context, I1, I2)) func(context.Context, I1, I2) {
	return Func20E(name, func(ctx context.Context, i1 I1, i2 I2) error {
		f(ctx, i1, i2)
		return nil
	})
}

func Func20E[I1 any, I2 any](name string, f func(context.Context, I1, I2) error) func(context.Context, I1, I2) {
	return func(ctx context.Context, i1 I1, i2 I2) {
		inputs := []any{i1, i2}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func21[I1 any, I2 any, O1 any](name string, f func(context.Context, I1, I2) O1) func(context.Context, I1, I2) O1 {
	return Func21E(name, func(ctx context.Context, i1 I1, i2 I2) (O1, error) {
		o1 := f(ctx, i1, i2)
		return o1, nil
	})
}

func Func21E[I1 any, I2 any, O1 any](name string, f func(context.Context, I1, I2) (O1, error)) func(context.Context, I1, I2) O1 {
	return func(ctx context.Context, i1 I1, i2 I2) O1 {
		inputs := []any{i1, i2}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func22[I1 any, I2 any, O1 any, O2 any](name string, f func(context.Context, I1, I2) (O1, O2)) func(context.Context, I1, I2) (O1, O2) {
	return Func22E(name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2)
		return o1, o2, nil
	})
}

func Func22E[I1 any, I2 any, O1 any, O2 any](name string, f func(context.Context, I1, I2) (O1, O2, error)) func(context.Context, I1, I2) (O1, O2) {
	return func(ctx context.Context, i1 I1, i2 I2) (O1, O2) {
		inputs := []any{i1, i2}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func23[I1 any, I2 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2) (O1, O2, O3)) func(context.Context, I1, I2) (O1, O2, O3) {
	return Func23E(name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2)
		return o1, o2, o3, nil
	})
}

func Func23E[I1 any, I2 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, error)) func(context.Context, I1, I2) (O1, O2, O3) {
	return func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3) {
		inputs := []any{i1, i2}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func24[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4)) func(context.Context, I1, I2) (O1, O2, O3, O4) {
	return Func24E(name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2)
		return o1, o2, o3, o4, nil
	})
}

func Func24E[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, error)) func(context.Context, I1, I2) (O1, O2, O3, O4) {
	return func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4) {
		inputs := []any{i1, i2}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func25[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5)) func(context.Context, I1, I2) (O1, O2, O3, O4, O5) {
	return Func25E(name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func25E[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5, error)) func(context.Context, I1, I2) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5) {
		inputs := []any{i1, i2}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func26[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6)) func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6) {
	return Func26E(name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func26E[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6, error)) func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{i1, i2}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func27[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6, O7) {
	return Func27E(name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx, i1, i2)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func27E[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{i1, i2}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

func Func30[I1 any, I2 any, I3 any](name string, f func(context.Context, I1, I2, I3)) func(context.Context, I1, I2, I3) {
	return Func30E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) error {
		f(ctx, i1, i2, i3)
		return nil
	})
}

func Func30E[I1 any, I2 any, I3 any](name string, f func(context.Context, I1, I2, I3) error) func(context.Context, I1, I2, I3) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func31[I1 any, I2 any, I3 any, O1 any](name string, f func(context.Context, I1, I2, I3) O1) func(context.Context, I1, I2, I3) O1 {
	return Func31E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, error) {
		o1 := f(ctx, i1, i2, i3)
		return o1, nil
	})
}

func Func31E[I1 any, I2 any, I3 any, O1 any](name string, f func(context.Context, I1, I2, I3) (O1, error)) func(context.Context, I1, I2, I3) O1 {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) O1 {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func32[I1 any, I2 any, I3 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3) (O1, O2)) func(context.Context, I1, I2, I3) (O1, O2) {
	return Func32E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3)
		return o1, o2, nil
	})
}

func Func32E[I1 any, I2 any, I3 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, error)) func(context.Context, I1, I2, I3) (O1, O2) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2) {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func33[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3)) func(context.Context, I1, I2, I3) (O1, O2, O3) {
	return Func33E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3)
		return o1, o2, o3, nil
	})
}

func Func33E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, error)) func(context.Context, I1, I2, I3) (O1, O2, O3) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3) {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func34[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4) {
	return Func34E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3)
		return o1, o2, o3, o4, nil
	})
}

func Func34E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, error)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4) {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func35[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5) {
	return Func35E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func35E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, error)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5) {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func36[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6) {
	return Func36E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func36E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6, error)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func37[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6, O7) {
	return Func37E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx, i1, i2, i3)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func37E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{i1, i2, i3}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

func Func40[I1 any, I2 any, I3 any, I4 any](name string, f func(context.Context, I1, I2, I3, I4)) func(context.Context, I1, I2, I3, I4) {
	return Func40E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) error {
		f(ctx, i1, i2, i3, i4)
		return nil
	})
}

func Func40E[I1 any, I2 any, I3 any, I4 any](name string, f func(context.Context, I1, I2, I3, I4) error) func(context.Context, I1, I2, I3, I4) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func41[I1 any, I2 any, I3 any, I4 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4) O1) func(context.Context, I1, I2, I3, I4) O1 {
	return Func41E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, error) {
		o1 := f(ctx, i1, i2, i3, i4)
		return o1, nil
	})
}

func Func41E[I1 any, I2 any, I3 any, I4 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, error)) func(context.Context, I1, I2, I3, I4) O1 {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) O1 {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func42[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2)) func(context.Context, I1, I2, I3, I4) (O1, O2) {
	return Func42E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3, i4)
		return o1, o2, nil
	})
}

func Func42E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, error)) func(context.Context, I1, I2, I3, I4) (O1, O2) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2) {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func43[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3) {
	return Func43E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, nil
	})
}

func Func43E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, error)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3) {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func44[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4) {
	return Func44E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, o4, nil
	})
}

func Func44E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, error)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4) {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func45[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5) {
	return Func45E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func45E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, error)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5) {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func46[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6) {
	return Func46E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func46E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6, error)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func47[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6, O7) {
	return Func47E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func47E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{i1, i2, i3, i4}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

func Func50[I1 any, I2 any, I3 any, I4 any, I5 any](name string, f func(context.Context, I1, I2, I3, I4, I5)) func(context.Context, I1, I2, I3, I4, I5) {
	return Func50E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) error {
		f(ctx, i1, i2, i3, i4, i5)
		return nil
	})
}

func Func50E[I1 any, I2 any, I3 any, I4 any, I5 any](name string, f func(context.Context, I1, I2, I3, I4, I5) error) func(context.Context, I1, I2, I3, I4, I5) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func51[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4, I5) O1) func(context.Context, I1, I2, I3, I4, I5) O1 {
	return Func51E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, error) {
		o1 := f(ctx, i1, i2, i3, i4, i5)
		return o1, nil
	})
}

func Func51E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, error)) func(context.Context, I1, I2, I3, I4, I5) O1 {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) O1 {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func52[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2) {
	return Func52E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, nil
	})
}

func Func52E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, error)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2) {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func53[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3) {
	return Func53E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, nil
	})
}

func Func53E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, error)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3) {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func54[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4) {
	return Func54E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, o4, nil
	})
}

func Func54E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, error)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4) {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func55[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5) {
	return Func55E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func55E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, error)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5) {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func56[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6) {
	return Func56E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func56E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6, error)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func57[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6, O7) {
	return Func57E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func57E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{i1, i2, i3, i4, i5}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

func Func60[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6)) func(context.Context, I1, I2, I3, I4, I5, I6) {
	return Func60E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) error {
		f(ctx, i1, i2, i3, i4, i5, i6)
		return nil
	})
}

func Func60E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) error) func(context.Context, I1, I2, I3, I4, I5, I6) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func61[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) O1) func(context.Context, I1, I2, I3, I4, I5, I6) O1 {
	return Func61E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, error) {
		o1 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, nil
	})
}

func Func61E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, error)) func(context.Context, I1, I2, I3, I4, I5, I6) O1 {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) O1 {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func62[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2) {
	return Func62E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, nil
	})
}

func Func62E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, error)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2) {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func63[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3) {
	return Func63E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, nil
	})
}

func Func63E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, error)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3) {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func64[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4) {
	return Func64E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, o4, nil
	})
}

func Func64E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, error)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4) {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func65[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5) {
	return Func65E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func65E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, error)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5) {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func66[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6) {
	return Func66E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func66E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6, error)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func67[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6, O7) {
	return Func67E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func67E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{i1, i2, i3, i4, i5, i6}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

func Func70[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) {
	return Func70E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) error {
		f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return nil
	})
}

func Func70E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) error) func(context.Context, I1, I2, I3, I4, I5, I6, I7) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 1)
		run(ctx, name, f, inputs, outputs)
		return
	}
}

func Func71[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) O1) func(context.Context, I1, I2, I3, I4, I5, I6, I7) O1 {
	return Func71E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, error) {
		o1 := f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return o1, nil
	})
}

func Func71E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, error)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) O1 {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) O1 {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 2)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0])
	}
}

func Func72[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2) {
	return Func72E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return o1, o2, nil
	})
}

func Func72E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, error)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2) {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 3)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1])
	}
}

func Func73[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3) {
	return Func73E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return o1, o2, o3, nil
	})
}

func Func73E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, error)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3) {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 4)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2])
	}
}

func Func74[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4) {
	return Func74E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return o1, o2, o3, o4, nil
	})
}

func Func74E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, error)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4) {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 5)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3])
	}
}

func Func75[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5) {
	return Func75E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return o1, o2, o3, o4, o5, nil
	})
}

func Func75E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any, O5 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, error)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4, O5) {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 6)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4])
	}
}

func Func76[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6) {
	return Func76E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Func76E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6, error)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4, O5, O6) {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 7)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5])
	}
}

func Func77[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6, O7)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6, O7) {
	return Func77E(name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4, O5, O6, O7, error) {
		o1, o2, o3, o4, o5, o6, o7 := f(ctx, i1, i2, i3, i4, i5, i6, i7)
		return o1, o2, o3, o4, o5, o6, o7, nil
	})
}

func Func77E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, I7 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any, O7 any](name string, f func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6, O7, error)) func(context.Context, I1, I2, I3, I4, I5, I6, I7) (O1, O2, O3, O4, O5, O6, O7) {
	return func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6, i7 I7) (O1, O2, O3, O4, O5, O6, O7) {
		inputs := []any{i1, i2, i3, i4, i5, i6, i7}
		outputs := make([]any, 8)
		run(ctx, name, f, inputs, outputs)
		return cast[O1](outputs[0]), cast[O2](outputs[1]), cast[O3](outputs[2]), cast[O4](outputs[3]), cast[O5](outputs[4]), cast[O6](outputs[5]), cast[O7](outputs[6])
	}
}

