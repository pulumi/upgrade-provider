// Code generated by calls.go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package step

// This file contains Call${I}${O} and Call${I}${O}E implementations for I=0..7, O=0..7.
//
// This represents a function call with I inputs and O returned values. If there is an E at
// the end of the Call: Call00E, then there is an additional expected error in the passed
// through function.

import "context"

func Call00(ctx context.Context, name string, f func(context.Context)) {
	Call00E(ctx, name, func(ctx context.Context) error {
		f(ctx)
		return nil
	})
}

func Call00E(ctx context.Context, name string, f func(context.Context)error)  {
	inputs := []any{}
	outputs := make([]any, 1)
	run(ctx, name, f, inputs, outputs)
	return
}

func Call01[O1 any](ctx context.Context, name string, f func(context.Context) O1) O1 {
	return Call01E(ctx, name, func(ctx context.Context) (O1, error) {
		o1 := f(ctx)
		return o1, nil
	})
}

func Call01E[O1 any](ctx context.Context, name string, f func(context.Context)(O1, error))  O1 {
	inputs := []any{}
	outputs := make([]any, 2)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1)
}

func Call02[O1 any, O2 any](ctx context.Context, name string, f func(context.Context) (O1, O2)) (O1, O2) {
	return Call02E(ctx, name, func(ctx context.Context) (O1, O2, error) {
		o1, o2 := f(ctx)
		return o1, o2, nil
	})
}

func Call02E[O1 any, O2 any](ctx context.Context, name string, f func(context.Context)(O1, O2, error))  (O1, O2) {
	inputs := []any{}
	outputs := make([]any, 3)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2)
}

func Call03[O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context) (O1, O2, O3)) (O1, O2, O3) {
	return Call03E(ctx, name, func(ctx context.Context) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx)
		return o1, o2, o3, nil
	})
}

func Call03E[O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context)(O1, O2, O3, error))  (O1, O2, O3) {
	inputs := []any{}
	outputs := make([]any, 4)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3)
}

func Call04[O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context) (O1, O2, O3, O4)) (O1, O2, O3, O4) {
	return Call04E(ctx, name, func(ctx context.Context) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx)
		return o1, o2, o3, o4, nil
	})
}

func Call04E[O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context)(O1, O2, O3, O4, error))  (O1, O2, O3, O4) {
	inputs := []any{}
	outputs := make([]any, 5)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4)
}

func Call05[O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context) (O1, O2, O3, O4, O5)) (O1, O2, O3, O4, O5) {
	return Call05E(ctx, name, func(ctx context.Context) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx)
		return o1, o2, o3, o4, o5, nil
	})
}

func Call05E[O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context)(O1, O2, O3, O4, O5, error))  (O1, O2, O3, O4, O5) {
	inputs := []any{}
	outputs := make([]any, 6)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5)
}

func Call06[O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context) (O1, O2, O3, O4, O5, O6)) (O1, O2, O3, O4, O5, O6) {
	return Call06E(ctx, name, func(ctx context.Context) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx)
		return o1, o2, o3, o4, o5, o6, nil
	})
}

func Call06E[O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context)(O1, O2, O3, O4, O5, O6, error))  (O1, O2, O3, O4, O5, O6) {
	inputs := []any{}
	outputs := make([]any, 7)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5), outputs[5].(O6)
}

func Call10[I1 any](ctx context.Context, name string, f func(context.Context, I1), i1 I1) {
	Call10E(ctx, name, func(ctx context.Context, i1 I1) error {
		f(ctx, i1)
		return nil
	}, i1)
}

func Call10E[I1 any](ctx context.Context, name string, f func(context.Context, I1)error, i1 I1)  {
	inputs := []any{i1}
	outputs := make([]any, 1)
	run(ctx, name, f, inputs, outputs)
	return
}

func Call11[I1 any, O1 any](ctx context.Context, name string, f func(context.Context, I1) O1, i1 I1) O1 {
	return Call11E(ctx, name, func(ctx context.Context, i1 I1) (O1, error) {
		o1 := f(ctx, i1)
		return o1, nil
	}, i1)
}

func Call11E[I1 any, O1 any](ctx context.Context, name string, f func(context.Context, I1)(O1, error), i1 I1)  O1 {
	inputs := []any{i1}
	outputs := make([]any, 2)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1)
}

func Call12[I1 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1) (O1, O2), i1 I1) (O1, O2) {
	return Call12E(ctx, name, func(ctx context.Context, i1 I1) (O1, O2, error) {
		o1, o2 := f(ctx, i1)
		return o1, o2, nil
	}, i1)
}

func Call12E[I1 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1)(O1, O2, error), i1 I1)  (O1, O2) {
	inputs := []any{i1}
	outputs := make([]any, 3)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2)
}

func Call13[I1 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1) (O1, O2, O3), i1 I1) (O1, O2, O3) {
	return Call13E(ctx, name, func(ctx context.Context, i1 I1) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1)
		return o1, o2, o3, nil
	}, i1)
}

func Call13E[I1 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1)(O1, O2, O3, error), i1 I1)  (O1, O2, O3) {
	inputs := []any{i1}
	outputs := make([]any, 4)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3)
}

func Call14[I1 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1) (O1, O2, O3, O4), i1 I1) (O1, O2, O3, O4) {
	return Call14E(ctx, name, func(ctx context.Context, i1 I1) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1)
		return o1, o2, o3, o4, nil
	}, i1)
}

func Call14E[I1 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1)(O1, O2, O3, O4, error), i1 I1)  (O1, O2, O3, O4) {
	inputs := []any{i1}
	outputs := make([]any, 5)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4)
}

func Call15[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1) (O1, O2, O3, O4, O5), i1 I1) (O1, O2, O3, O4, O5) {
	return Call15E(ctx, name, func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1)
		return o1, o2, o3, o4, o5, nil
	}, i1)
}

func Call15E[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1)(O1, O2, O3, O4, O5, error), i1 I1)  (O1, O2, O3, O4, O5) {
	inputs := []any{i1}
	outputs := make([]any, 6)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5)
}

func Call16[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1) (O1, O2, O3, O4, O5, O6), i1 I1) (O1, O2, O3, O4, O5, O6) {
	return Call16E(ctx, name, func(ctx context.Context, i1 I1) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1)
		return o1, o2, o3, o4, o5, o6, nil
	}, i1)
}

func Call16E[I1 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1)(O1, O2, O3, O4, O5, O6, error), i1 I1)  (O1, O2, O3, O4, O5, O6) {
	inputs := []any{i1}
	outputs := make([]any, 7)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5), outputs[5].(O6)
}

func Call20[I1 any, I2 any](ctx context.Context, name string, f func(context.Context, I1, I2), i1 I1, i2 I2) {
	Call20E(ctx, name, func(ctx context.Context, i1 I1, i2 I2) error {
		f(ctx, i1, i2)
		return nil
	}, i1, i2)
}

func Call20E[I1 any, I2 any](ctx context.Context, name string, f func(context.Context, I1, I2)error, i1 I1, i2 I2)  {
	inputs := []any{i1, i2}
	outputs := make([]any, 1)
	run(ctx, name, f, inputs, outputs)
	return
}

func Call21[I1 any, I2 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2) O1, i1 I1, i2 I2) O1 {
	return Call21E(ctx, name, func(ctx context.Context, i1 I1, i2 I2) (O1, error) {
		o1 := f(ctx, i1, i2)
		return o1, nil
	}, i1, i2)
}

func Call21E[I1 any, I2 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2)(O1, error), i1 I1, i2 I2)  O1 {
	inputs := []any{i1, i2}
	outputs := make([]any, 2)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1)
}

func Call22[I1 any, I2 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2) (O1, O2), i1 I1, i2 I2) (O1, O2) {
	return Call22E(ctx, name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2)
		return o1, o2, nil
	}, i1, i2)
}

func Call22E[I1 any, I2 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2)(O1, O2, error), i1 I1, i2 I2)  (O1, O2) {
	inputs := []any{i1, i2}
	outputs := make([]any, 3)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2)
}

func Call23[I1 any, I2 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2) (O1, O2, O3), i1 I1, i2 I2) (O1, O2, O3) {
	return Call23E(ctx, name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2)
		return o1, o2, o3, nil
	}, i1, i2)
}

func Call23E[I1 any, I2 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2)(O1, O2, O3, error), i1 I1, i2 I2)  (O1, O2, O3) {
	inputs := []any{i1, i2}
	outputs := make([]any, 4)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3)
}

func Call24[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2) (O1, O2, O3, O4), i1 I1, i2 I2) (O1, O2, O3, O4) {
	return Call24E(ctx, name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2)
		return o1, o2, o3, o4, nil
	}, i1, i2)
}

func Call24E[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2)(O1, O2, O3, O4, error), i1 I1, i2 I2)  (O1, O2, O3, O4) {
	inputs := []any{i1, i2}
	outputs := make([]any, 5)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4)
}

func Call25[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5), i1 I1, i2 I2) (O1, O2, O3, O4, O5) {
	return Call25E(ctx, name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2)
		return o1, o2, o3, o4, o5, nil
	}, i1, i2)
}

func Call25E[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2)(O1, O2, O3, O4, O5, error), i1 I1, i2 I2)  (O1, O2, O3, O4, O5) {
	inputs := []any{i1, i2}
	outputs := make([]any, 6)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5)
}

func Call26[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2) (O1, O2, O3, O4, O5, O6), i1 I1, i2 I2) (O1, O2, O3, O4, O5, O6) {
	return Call26E(ctx, name, func(ctx context.Context, i1 I1, i2 I2) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2)
		return o1, o2, o3, o4, o5, o6, nil
	}, i1, i2)
}

func Call26E[I1 any, I2 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2)(O1, O2, O3, O4, O5, O6, error), i1 I1, i2 I2)  (O1, O2, O3, O4, O5, O6) {
	inputs := []any{i1, i2}
	outputs := make([]any, 7)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5), outputs[5].(O6)
}

func Call30[I1 any, I2 any, I3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3), i1 I1, i2 I2, i3 I3) {
	Call30E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) error {
		f(ctx, i1, i2, i3)
		return nil
	}, i1, i2, i3)
}

func Call30E[I1 any, I2 any, I3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3)error, i1 I1, i2 I2, i3 I3)  {
	inputs := []any{i1, i2, i3}
	outputs := make([]any, 1)
	run(ctx, name, f, inputs, outputs)
	return
}

func Call31[I1 any, I2 any, I3 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3) O1, i1 I1, i2 I2, i3 I3) O1 {
	return Call31E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, error) {
		o1 := f(ctx, i1, i2, i3)
		return o1, nil
	}, i1, i2, i3)
}

func Call31E[I1 any, I2 any, I3 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3)(O1, error), i1 I1, i2 I2, i3 I3)  O1 {
	inputs := []any{i1, i2, i3}
	outputs := make([]any, 2)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1)
}

func Call32[I1 any, I2 any, I3 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3) (O1, O2), i1 I1, i2 I2, i3 I3) (O1, O2) {
	return Call32E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3)
		return o1, o2, nil
	}, i1, i2, i3)
}

func Call32E[I1 any, I2 any, I3 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3)(O1, O2, error), i1 I1, i2 I2, i3 I3)  (O1, O2) {
	inputs := []any{i1, i2, i3}
	outputs := make([]any, 3)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2)
}

func Call33[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3) (O1, O2, O3), i1 I1, i2 I2, i3 I3) (O1, O2, O3) {
	return Call33E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3)
		return o1, o2, o3, nil
	}, i1, i2, i3)
}

func Call33E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3)(O1, O2, O3, error), i1 I1, i2 I2, i3 I3)  (O1, O2, O3) {
	inputs := []any{i1, i2, i3}
	outputs := make([]any, 4)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3)
}

func Call34[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4), i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4) {
	return Call34E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3)
		return o1, o2, o3, o4, nil
	}, i1, i2, i3)
}

func Call34E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3)(O1, O2, O3, O4, error), i1 I1, i2 I2, i3 I3)  (O1, O2, O3, O4) {
	inputs := []any{i1, i2, i3}
	outputs := make([]any, 5)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4)
}

func Call35[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5), i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5) {
	return Call35E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3)
		return o1, o2, o3, o4, o5, nil
	}, i1, i2, i3)
}

func Call35E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3)(O1, O2, O3, O4, O5, error), i1 I1, i2 I2, i3 I3)  (O1, O2, O3, O4, O5) {
	inputs := []any{i1, i2, i3}
	outputs := make([]any, 6)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5)
}

func Call36[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3) (O1, O2, O3, O4, O5, O6), i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, O6) {
	return Call36E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3)
		return o1, o2, o3, o4, o5, o6, nil
	}, i1, i2, i3)
}

func Call36E[I1 any, I2 any, I3 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3)(O1, O2, O3, O4, O5, O6, error), i1 I1, i2 I2, i3 I3)  (O1, O2, O3, O4, O5, O6) {
	inputs := []any{i1, i2, i3}
	outputs := make([]any, 7)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5), outputs[5].(O6)
}

func Call40[I1 any, I2 any, I3 any, I4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4), i1 I1, i2 I2, i3 I3, i4 I4) {
	Call40E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) error {
		f(ctx, i1, i2, i3, i4)
		return nil
	}, i1, i2, i3, i4)
}

func Call40E[I1 any, I2 any, I3 any, I4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4)error, i1 I1, i2 I2, i3 I3, i4 I4)  {
	inputs := []any{i1, i2, i3, i4}
	outputs := make([]any, 1)
	run(ctx, name, f, inputs, outputs)
	return
}

func Call41[I1 any, I2 any, I3 any, I4 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4) O1, i1 I1, i2 I2, i3 I3, i4 I4) O1 {
	return Call41E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, error) {
		o1 := f(ctx, i1, i2, i3, i4)
		return o1, nil
	}, i1, i2, i3, i4)
}

func Call41E[I1 any, I2 any, I3 any, I4 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4)(O1, error), i1 I1, i2 I2, i3 I3, i4 I4)  O1 {
	inputs := []any{i1, i2, i3, i4}
	outputs := make([]any, 2)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1)
}

func Call42[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4) (O1, O2), i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2) {
	return Call42E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3, i4)
		return o1, o2, nil
	}, i1, i2, i3, i4)
}

func Call42E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4)(O1, O2, error), i1 I1, i2 I2, i3 I3, i4 I4)  (O1, O2) {
	inputs := []any{i1, i2, i3, i4}
	outputs := make([]any, 3)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2)
}

func Call43[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3), i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3) {
	return Call43E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, nil
	}, i1, i2, i3, i4)
}

func Call43E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4)(O1, O2, O3, error), i1 I1, i2 I2, i3 I3, i4 I4)  (O1, O2, O3) {
	inputs := []any{i1, i2, i3, i4}
	outputs := make([]any, 4)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3)
}

func Call44[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4), i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4) {
	return Call44E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, o4, nil
	}, i1, i2, i3, i4)
}

func Call44E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4)(O1, O2, O3, O4, error), i1 I1, i2 I2, i3 I3, i4 I4)  (O1, O2, O3, O4) {
	inputs := []any{i1, i2, i3, i4}
	outputs := make([]any, 5)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4)
}

func Call45[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5), i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5) {
	return Call45E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, o4, o5, nil
	}, i1, i2, i3, i4)
}

func Call45E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4)(O1, O2, O3, O4, O5, error), i1 I1, i2 I2, i3 I3, i4 I4)  (O1, O2, O3, O4, O5) {
	inputs := []any{i1, i2, i3, i4}
	outputs := make([]any, 6)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5)
}

func Call46[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4) (O1, O2, O3, O4, O5, O6), i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, O6) {
	return Call46E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3, i4)
		return o1, o2, o3, o4, o5, o6, nil
	}, i1, i2, i3, i4)
}

func Call46E[I1 any, I2 any, I3 any, I4 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4)(O1, O2, O3, O4, O5, O6, error), i1 I1, i2 I2, i3 I3, i4 I4)  (O1, O2, O3, O4, O5, O6) {
	inputs := []any{i1, i2, i3, i4}
	outputs := make([]any, 7)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5), outputs[5].(O6)
}

func Call50[I1 any, I2 any, I3 any, I4 any, I5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) {
	Call50E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) error {
		f(ctx, i1, i2, i3, i4, i5)
		return nil
	}, i1, i2, i3, i4, i5)
}

func Call50E[I1 any, I2 any, I3 any, I4 any, I5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5)error, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)  {
	inputs := []any{i1, i2, i3, i4, i5}
	outputs := make([]any, 1)
	run(ctx, name, f, inputs, outputs)
	return
}

func Call51[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5) O1, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) O1 {
	return Call51E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, error) {
		o1 := f(ctx, i1, i2, i3, i4, i5)
		return o1, nil
	}, i1, i2, i3, i4, i5)
}

func Call51E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5)(O1, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)  O1 {
	inputs := []any{i1, i2, i3, i4, i5}
	outputs := make([]any, 2)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1)
}

func Call52[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2) {
	return Call52E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, nil
	}, i1, i2, i3, i4, i5)
}

func Call52E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5)(O1, O2, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)  (O1, O2) {
	inputs := []any{i1, i2, i3, i4, i5}
	outputs := make([]any, 3)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2)
}

func Call53[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3) {
	return Call53E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, nil
	}, i1, i2, i3, i4, i5)
}

func Call53E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5)(O1, O2, O3, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)  (O1, O2, O3) {
	inputs := []any{i1, i2, i3, i4, i5}
	outputs := make([]any, 4)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3)
}

func Call54[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4) {
	return Call54E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, o4, nil
	}, i1, i2, i3, i4, i5)
}

func Call54E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5)(O1, O2, O3, O4, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)  (O1, O2, O3, O4) {
	inputs := []any{i1, i2, i3, i4, i5}
	outputs := make([]any, 5)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4)
}

func Call55[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5) {
	return Call55E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, o4, o5, nil
	}, i1, i2, i3, i4, i5)
}

func Call55E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5)(O1, O2, O3, O4, O5, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)  (O1, O2, O3, O4, O5) {
	inputs := []any{i1, i2, i3, i4, i5}
	outputs := make([]any, 6)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5)
}

func Call56[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5) (O1, O2, O3, O4, O5, O6), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, O6) {
	return Call56E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3, i4, i5)
		return o1, o2, o3, o4, o5, o6, nil
	}, i1, i2, i3, i4, i5)
}

func Call56E[I1 any, I2 any, I3 any, I4 any, I5 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5)(O1, O2, O3, O4, O5, O6, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5)  (O1, O2, O3, O4, O5, O6) {
	inputs := []any{i1, i2, i3, i4, i5}
	outputs := make([]any, 7)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5), outputs[5].(O6)
}

func Call60[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) {
	Call60E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) error {
		f(ctx, i1, i2, i3, i4, i5, i6)
		return nil
	}, i1, i2, i3, i4, i5, i6)
}

func Call60E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6)error, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)  {
	inputs := []any{i1, i2, i3, i4, i5, i6}
	outputs := make([]any, 1)
	run(ctx, name, f, inputs, outputs)
	return
}

func Call61[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6) O1, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) O1 {
	return Call61E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, error) {
		o1 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, nil
	}, i1, i2, i3, i4, i5, i6)
}

func Call61E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6)(O1, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)  O1 {
	inputs := []any{i1, i2, i3, i4, i5, i6}
	outputs := make([]any, 2)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1)
}

func Call62[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2) {
	return Call62E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, error) {
		o1, o2 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, nil
	}, i1, i2, i3, i4, i5, i6)
}

func Call62E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6)(O1, O2, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)  (O1, O2) {
	inputs := []any{i1, i2, i3, i4, i5, i6}
	outputs := make([]any, 3)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2)
}

func Call63[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3) {
	return Call63E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, error) {
		o1, o2, o3 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, nil
	}, i1, i2, i3, i4, i5, i6)
}

func Call63E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6)(O1, O2, O3, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)  (O1, O2, O3) {
	inputs := []any{i1, i2, i3, i4, i5, i6}
	outputs := make([]any, 4)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3)
}

func Call64[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4) {
	return Call64E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, error) {
		o1, o2, o3, o4 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, o4, nil
	}, i1, i2, i3, i4, i5, i6)
}

func Call64E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6)(O1, O2, O3, O4, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)  (O1, O2, O3, O4) {
	inputs := []any{i1, i2, i3, i4, i5, i6}
	outputs := make([]any, 5)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4)
}

func Call65[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5) {
	return Call65E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, error) {
		o1, o2, o3, o4, o5 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, o4, o5, nil
	}, i1, i2, i3, i4, i5, i6)
}

func Call65E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6)(O1, O2, O3, O4, O5, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)  (O1, O2, O3, O4, O5) {
	inputs := []any{i1, i2, i3, i4, i5, i6}
	outputs := make([]any, 6)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5)
}

func Call66[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6) (O1, O2, O3, O4, O5, O6), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, O6) {
	return Call66E(ctx, name, func(ctx context.Context, i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6) (O1, O2, O3, O4, O5, O6, error) {
		o1, o2, o3, o4, o5, o6 := f(ctx, i1, i2, i3, i4, i5, i6)
		return o1, o2, o3, o4, o5, o6, nil
	}, i1, i2, i3, i4, i5, i6)
}

func Call66E[I1 any, I2 any, I3 any, I4 any, I5 any, I6 any, O1 any, O2 any, O3 any, O4 any, O5 any, O6 any](ctx context.Context, name string, f func(context.Context, I1, I2, I3, I4, I5, I6)(O1, O2, O3, O4, O5, O6, error), i1 I1, i2 I2, i3 I3, i4 I4, i5 I5, i6 I6)  (O1, O2, O3, O4, O5, O6) {
	inputs := []any{i1, i2, i3, i4, i5, i6}
	outputs := make([]any, 7)
	run(ctx, name, f, inputs, outputs)
	return outputs[0].(O1), outputs[1].(O2), outputs[2].(O3), outputs[3].(O4), outputs[4].(O5), outputs[5].(O6)
}

